2022. 03. 24 4주차 수업

🟡 데이터 형식과 배열

🟢 비트, 바이트, 진수

🔶 비트

--> 비트(bit)는 전기 스위치와 비슷한 개념이다. 전기 스위치에는 OFF와 ON만 있듯이 비트에도 0(off)과 1(on)만 있다.

🔶 진수

10진수: 0 1 2 3 4 5 6 7 8 9  /  10 11 12 13 14 15 16 17 18 19 / 20 21 22 23 ...
 8진수: 0 1 2 3 4 5 6 7  /  10 11 12 13 14 15 16 17  /  20 21 22 23 ...
16진수: 0 1 2 3 4 5 6 7 8 9 0A 0B 0C 0D 0E 0F  /  10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D 1E 1F / 20 21 22 23 ... 

                      * 16진수가 필요한 이유는 2진수의 네 자리와 16진수의 한 자리가 딱 맞아떨어지기 때문이다.
                      
                      
    * 2진수 --> 10진수        
      10진수 --> 2진수
      
      2진수 --> 16진수            
      16진수 --> 2진수           진수 변환법은 책 p. 93 ~ 95 읽기!!
      
      10진수 --> 16진수
      16진수 --> 10진수
                       
      
      16진수의 10과 2진수의 10은 다르다.
      
🔶 숫자형 데이터 형식      
                      
 --> 소수점의 유무에 따라 크게 정수형과 실수형으로 나눌 수 있다.   정수형과 실수형은 다시 조금씩 다른 데이터 형식으로 구분된다.                      
                      
		      
   short  -->  작은 정수형
   unsigned short --> 부호 없는 작은 정수형
   int --> 정수형 
   unsigned int --> 부호 없 자형 또는 부호 없는 정수형
   
 ----------------------------------------------------------------------  
   
   #include <stdio.h>

int main()
{
	int a = 100, b = 200;           

	float result;                   
	result = a / b;

	printf("%f", result);      -->  출력값:  0.000000   
}
                                        이유:  정수끼리 연산을 수행하면 그 결과도 정수가 되기 때문이다.
                                                 ❗❗❗ 실수가 하나라도 들어가면 그 결과는 실수가 된다. ❗❗❗
                      
    #include <stdio.h>

int main()
{
	int a = 100;
	float b = 200;             <--- 자료형을 실수로 고쳐준다.

	float result;
	result = a / b;

	printf("%.1f", result);      --> 출력값:  0.5
}
   
   
   

🔶 문자형 데이터 형식

  -->  일반 글자를 표현할 수 있는 데이터 형식에는 문자형과 문자열이 있다.
       🔅문자열은 별도의 데이터 형식이 아니며🔅 문자의 집합 정도로 생각하면 된다.

* 아스키코드

  --> ASCII (American Standared Code for Information Interchange)  = 미국정보교환표준부호
      
      사람과 컴퓨터의 정보 교환을 위한 표준화된 코드

* 한 글자를 뜻하는 문자형

  --> 문자형은 문자 또는 기호 하나를 저장하는 형식을 말한다.
  
  char  -->  문자형 또는 정수형
  unsigned char  -->  문자형 또는 부호 없는 


      *char 형에는 문자뿐만 아니라 값의 범위에 해당하는 정수를 대입할 수 있다.
      즉, char 형을 1바이트 크기의 정수형으로 취급해도 상관없다.
      
      ✅printf("%d\n", 'A');    -->   65 로 출력.
         printf("%c\n", 65);     -->  A로 출력.
 
#include <stdio.h>

int main()
{
	int a;                         <---- a와 b의 변수형이 달라도  변수 사이에 대입이 된다. 
	char b;

	a = 65;
	b = a;
 
       printf("%c", a)                 <-----     정수형 변수 a를 문자형으로 출력했는데 아스키코드 값인 'A'가 출력된다. 
	                                          즉, 입력하는 값이 0 ~ 127이라면 정수형 변수(int)도 문자형으로 출력할 수 있다.
       printf("%d", b);      <-- 65로 출력          
}

            ❗❗❗ 'A'와 65는 동일한 값이지만 어떤 출력 서실을 사용하느냐에 따라 다른 값이 출력된다. ❗❗❗


🔶 여러 글자가 모인 문자열과 배열

  -->  문자열은 '문자형 집합'의 개념으로 "문자열"이라는 데이터 형식이 따로 존재하지 않는다.
       문자형 데이터 형식 char는 한 글자만 저장할 수 있다고 했으며, 문자열은 한 문자가 여러 개 이어진 것이라고 생각하면 된다.
       
*문자열의 기본형식

  --> 문자열을 저장하려면 최소한 문자열의 길이에 1을 더한 자릿수가 필요하다. 즉 여섯 글자를 저장하려면 최소한 일곱 자리가 필요하다는 뜻이다.
      그 이유는 이 문자열이 끝난다는 것을 표시하는 널(null) 문자('\0')가 끝에 들어가야 하기 때문이다.
      
      널 문자는 문자열의 끝을 알려주는 중요한 역할을 한다.  '\'와 '0'을 합친 널 문자는 하나의 문자로 취급하지만 화면에는 출력되지 않는다.
      
      ✅char str[7];   <--  str 라는 변수에 문자형 7개를 배열함.
      
         str[0] ~ str[6] 이다. (배열이 0부터 시작한다.)

-------------------------------------------------------

#include <stdio.h>
#include <string.h>

int main()
{
	char str1[10];                   <---  문자형 배열 str1과 str2 선언 
	char str2[10];
	char str3[10] = "CookBook";      <--- 문자형 배열 str3을 선언함과 동시에 문자열을 대입

	strcpy(str1, "Basic-C");             <--- str1에 문자열 "Basic-c"를 대입
	strcpy(str2, str3);                  <--- str2에 str3를 대입

	printf("str1 --> %s\n", str1);               <--- 문자형 배열 출력
	printf("str2 --> %s\n", str2);
	printf("str3 --> %s\n", str3);
}

       ✅ str1  ->  B a s i c - C \0 _ _            <-- 10개의 배열 안에 2칸이 남음
           
	   str2  ->  C o o k B o o k \0 _            <-- 10개의 배열 안에 1칸이 남음

            str3  ->  C o o k B o o k \0 _            <-- 10개의 배열 안에 1칸이 남음
 


------------------------------------------------------------------------


#include <stdio.h>

int main()
{
	char str[10] = "0123456789";                 <--  열 자리의 str배열에 글자 0123456789 (10개)를 대입한다.

	printf("str==> %s \n", str);

	str[0] = 'I';                        <--  str 배열에 글자 6개와 널 문자를 입력한다.
	str[1] = 'T';
	str[2] = 'C';
	str[3] = 'o';
	str[4] = 'o';
	str[5] = 'k';
	str[6] = '\0';

	printf("str ==> %s \n", str);
	printf("str[7] ==> %c \n", str[7]);
	printf("str[50] ==> %c \n", str[50]);
}
                
                                 널 문자(\0)은 문자열을 출력할 때 자동차의 브레이크와 같은 역할을 한다. 
				 
                                 char str[10] = "0123456789";    <-- 열 자리의 배열에 10개의 문자가 들어가기 때문에 널 문자가 들어갈 자리가 없다.
                                 printf("str==> %s \n", str);        따라서 배열 str을 출력할 때 뒤에 이상한 쓰레기값이 출력 되는 것이다.
				 
          출력값:    str==> 0123456789儆儆儆儆儆儆儆儆儆儆儆儆儆儆儆儆儆儆儆儆儆儆儆儆儆儆儆儆儆儆儆픟Q???  
                    str ==> ITCook
                    str[7] ==> 7
                    str[50] ==> ?     <-- 선언한 범위를 넘어서도 첨자는 사용할 수 있다. 물론 출력된 값은 예상할 수 없는 이상한 값이다.















https://ko.wikihow.com/2%EC%A7%84%EC%88%98%EB%A5%BC-16%EC%A7%84%EC%88%98%EB%A1%9C-%EB%B0%94%EA%BE%B8%EB%8A%94-%EB%B2%95
