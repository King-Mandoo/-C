#include <stdio.h>

int main(void)
{
	int a;                   // int형 변수 a 선언
	int b, c;                // 2개의 int형 변수 b,c를 동시에 선언
	double da;               // double형 변서 da 선언
	char ch;                 // char형 변수 ch 선언

	a = 10;                  // int형 변수 a에 정수 10 대입
	b = a;                   // int형 변수 b에 정수 a의 값 대입
	c = a + 20;               
	da = 3.5;
	ch = 'A';

	printf("변수 a의 값 : %d\n", a);  
	printf("변수 b의 값 : %d\n", b);
	printf("변수 c의 값 : %d\n", c);
	printf("변수 da의 값 : %.1lf\n", da);
	printf("변수 ch의 값: %c\n", ch);

	return 0;
}

//  =(대입 연산자), 오른쪽 값을 왼쪽에 저장(할당)한다는 의미이다.

변수를 선언하면!!!! 메모리에 저장 공간이 생기는데 처음 그 안에 있는 값은 알 수가 없다.
컴퓨터의 메모리 공간은 재활용이된다. 프로그램이 종료되면 사용하던 메모리 공간을 반납하고 새로 실행된 프로그램이 그 공간을 사용한다.
이때 종료된 프로그램이 어떤 값을 메모리 공간에 남겨 놓았는지 알 수 없다. 
새 프로그램에서 이 값은 의미가 없으므로 이를 "쓰레기 값 (grabage value)"이라고 한다. 
자칫 이 쓰레기 값 때문에 프로그램에 오류가 생길 수 있으므로 반드시 원하는 값으로 바꾸는 초기화 과정이 필요하다.

이를 초기화하는 방법은 무엇일까??
** 바로 대입 연산자를 사용하는 것이다.
   변수를 선언한 이후, 변수명으로 값을 저장하고 연산하거나 출력에 사용할 수 있다.
   
1. 앞에서 선언한 변수와 같은 이름은 사용할 수 없다.
2. 컴파일러에 따라 변수의 선언 위치가 제한될 수 있다.
3. 변수의 자료형이 같으면 동시에 둘 이상의 변수를 선언할 수 있다.
---> 예) 6번 줄
4. 대입 연산자(=)는 연산자 왼쪽의 변수에 오른쪽의 값을 저장한다.
5. 변수는 대입 연산자 왼쪽에서는 저장 공간이 되고, 오른쪽에서는 값이 된다.
---> 예) 11번 줄
     10번 줄의 a는 저장공간이지만, 11번 줄의 a는 값이다. 
     같은 이름을 사용하더라도 어디에 있는지에 따라 컴파일러는 다른 의미로 해석한다.
     저장 공간으로 사용하는 변수를 I-value (left value)
     값으로 사용하는 변수를 r-value (right value) 로 구분한다.
     
     int a, b;
     a = 10;    // a는 저장 공간이므로 값이 10으로 변경된다.
     b = a;     // 이 a는 저장 공간의 값(10)을 복사해서 사용하므로 변수 a의 값은 바뀌지 않는다.
