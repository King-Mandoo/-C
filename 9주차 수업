2022. 04. 28.

🟡 배열의 이해

🟢 배열을 사용하는 이유

--> 각각의 변수에 값을 입력할 때, 변수의 개수가 3개 정도라면 각각 값을 입력할 때 그리 번거롭지 않겠지만, 변수의 개수가 50개, 100개
    이상으로 많아지게 된다면 변수의 값을 하나씩 입력받도록 하는 코드를 짜기가 많이 번거롭고, 보기에도 안좋을 것이다.
    하지만 배열을 사용하면 코드의 길이를 매우 단축할 수 있고 효과적인 코드를 짤수가 있다.
    
    int a,b,c,d;   
    int str[4];   --> 이렇게 배열을 사용하면 변수를 각각 선언하지 않아도 간단하게 변수를 담을 바구니를 만들어낼 수 있다.
    
    
    
 #include <stdio.h>

int main()
{
	int aa[4];
	int hap;

	printf("첫 번째 숫자를 입력: ");
	scanf("%d", &aa[0]);
	printf("두 번째 숫자를 입력: ");
	scanf("%d", &aa[1]);
	printf("세 번째 숫자를 입력: ");
	scanf("%d", &aa[2]);
	printf("네 번째 숫자를 입력: ");
	scanf("%d", &aa[3]);

	hap = aa[0] + aa[1] + aa[2] + aa[3];
	printf("합: %d", hap);

	return 0;
}

--> 배열을 활용한 코드이지만, 그다지 효율성을 느낄 수는 없다.   아래로 ㄱㄱ

🟢 배열의 활용 범위

 
  🟠 배열의 실제 활용
  
   --> 배열의 가치가 빛을 발하게 하려면 배열의 첨자가 순서대로 변할 수 있도록 반복문과 함께 활용해야 한다.
   
   
   
   #include <stdio.h>

int main()
{
	int aa[4];
	int hap = 0;

	for (int i = 0; i < 4; i++)
	{
		printf("%d 번째 숫자: ", i + 1);
		scanf("%d", &aa[i]);
		hap = hap + aa[i];
	}

	printf("합: %d", hap);

	return 0;
}

--> for문을 활용하여 비교적 훨씬 간단하게 코드를 수정하여 자신이 원하는 개수의 숫자의 합을 구할 수 있게 되었다.


  
  🟠 배열의 초기화
  
  int aa[4] = {100, 200, 300 ,400}; 
  
  --> int aa[0] = 100;
      int aa[1] = 200;
      int aa[2] = 300;
      int aa[3] = 400;   
      
      
   int aa[] = {100, 200, 300, 400};     -->   이렇게 배열의 개수(첨자)를 반드시 지정하지 않아도 된다.  {} 안의 초깃값 개수에 따라 자동으로 배열의 개수가 정해진다.
      
      
   int aa[4];   -->  이렇게 배열을 선언하기만 하고 초기화를 하지 않으면, 배열에 아무것도 넣지 않았기 때문에 쓰레기 값이 들어가게된다.
   
   
   int aa[4] = {100, 200};  -->  배열의 개수보다 초기화할 값의 개수가 적으면 초기값이 주어진 aa[0]과 aa[1]에는 각각 100과 200이 들어가지만,
                                 나머지 aa[2]와 aa[3]에는 0이 들어가게 된다.
                                 
   
   int aa[1000] = {0};   -->  1000개의 배열이 전부 0으로 초기화가 된다.
   
   
   int aa[3] = {100, 200, 300, 400};   -->  배열의 개수가 초기화 값보다 적다면 컴파일 오류가 발생한다.
   
   
   
   
   #include <stdio.h>

int main()
{
	int aa[50];
	int bb[50];
	int k = 1;

	for (int i = 0; i < 50; i++)
	{
		aa[i] = k *= 3;
		printf("aa[%d]의 값: %d \n", i, aa[i]);
	}

	printf("\n");

	for (int i = 0; i < 50; i++)
	{
		bb[i] = aa[49 - i];
		printf("bb[%d]의 값: %d \n", i, bb[i]);
	}

	return 0;
}

   
  
  🟠 배열의 크기 알아내기
  
  -->    배열의 크기(요소의 개수) = sizeof(전체 배열 이름) / sizeof(배열의 데이터 형식);
         
         
         int aa[5]; 일 때,
         배열의 크기(요소의 개수) = sizeof(aa) / sizeof(int)
         --> int 하나 당 4바이트를 차지하므로, sizeof(aa)는 20바이트이고 sizeof(int)는 4바이트이다.
             따라서 배열의 크기(요소의 개수)는 5개이다.
             aa[0], aa[1], aa[2], aa[3], aa[4]
  
  
  #include <stdio.h>

int main()
{
	int aa[5] = { 100, 50, 300, 20, 0 };
	int count = 5;
	int hap = 0;

	for (int i = 0; i < count; i++)
	{
		hap = hap + aa[i];
	}

	printf("%d", hap);

	return 0;
}
  
🟡 배열과 문자열

🟢 정수형 배열과 문자형 배열

 -->  정수형 배열은 각각의 배열 요소에 정수 (100, 200, 300, 400)를 입력하고, 문자형 배열은 각각의 배열 요소에 문자 ('X', 'Y', 'Z', '\0')를 입력한다.
      문자형 배열의 마지막에는 문자열의 마지막을 의미하는 널문자 '\0'을 넣는다.
      문자열은 문자형 배열에 입력하는 '문자의 집합'이라고 할 수 있다.
      
      
  #include <stdio.h>

void main()
{
	char ss[5] = "abcd";
	char tt[5];
	
	for (int i = 0; i < 4; i++)
	{
		tt[i] = ss[3 - i];   // tt[0] = ss[3],  tt[1] = ss[2],  tt[2] = ss[1],  tt[3] = ss[0]
	}
	tt[4] = '\0';  

	printf("%s", tt);   // "dcba" 출력

	return 0;
}



🟢 문자열 함수로 문자열 다루기


  🟠 문자열 처리 함수
  
  🟠 문자열 입출력 함수
